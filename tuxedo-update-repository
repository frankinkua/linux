#!/bin/bash

set -ex

UBUNTU_CODENAME=mantic
UBUNTU_REMOTE_NAME=ubuntu-${UBUNTU_CODENAME}
UBUNTU_REMOTE_URL=git://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/${UBUNTU_CODENAME}
UBUNTU_TAG_VERSION_PREFIX=Ubuntu-
MAINLINE_KERNEL_VERSION=6.5
UBUNTU_KERNEL_BRANCH_NEXT=master-next
TUXEDO_KERNEL_BRANCH=tuxedo-${MAINLINE_KERNEL_VERSION}-22.04
TUXEDO_TAG_VERSION_PREFIX=Ubuntu-tuxedo-

echo "===Starting repository update.==="

SCRIPT=$(realpath "$0")
SCRIPTPATH=$(dirname "${SCRIPT}")
cd "${SCRIPTPATH}"

echo "===Fetching newest version from upstream.==="

if git remote | grep ${UBUNTU_REMOTE_NAME}; then
    git remote set-url ${UBUNTU_REMOTE_NAME} ${UBUNTU_REMOTE_URL}
else
    git remote add ${UBUNTU_REMOTE_NAME} ${UBUNTU_REMOTE_URL}
fi
git fetch ${UBUNTU_REMOTE_NAME} --tags

CURRENT_BASE_VERSION_TAG=$(git describe --tags --abbrev=0 --match "${UBUNTU_TAG_VERSION_PREFIX}*" --exclude "${TUXEDO_TAG_VERSION_PREFIX}*")
CURRENT_BASE_VERSION_TAG_NUMBER=$(echo ${CURRENT_BASE_VERSION_TAG} | grep -Po "(?<=^${UBUNTU_TAG_VERSION_PREFIX}).*(?=$)")
CURRENT_BASE_VERSION_NUMBER=${CURRENT_BASE_VERSION_TAG_NUMBER//_/\~}

NEWEST_VERSION_TAG=$(git describe --tags ${UBUNTU_REMOTE_NAME}/${UBUNTU_KERNEL_BRANCH_NEXT} --abbrev=0)
NEWEST_VERSION_TAG_NUMBER=$(echo ${NEWEST_VERSION_TAG} | grep -Po "(?<=^${UBUNTU_TAG_VERSION_PREFIX}).*(?=$)")
NEWEST_VERSION_NUMBER=${NEWEST_VERSION_TAG_NUMBER//_/\~}

if [ ${CURRENT_BASE_VERSION_NUMBER} = ${NEWEST_VERSION_NUMBER} ]; then
    echo "===Version already up to date. Exiting.==="
    exit
fi

echo "===Start package update.==="

if git remote | grep torvalds; then
    git remote set-url torvalds git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
else
    git remote add torvalds git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
fi
git fetch torvalds --tags

echo "===Checking out correct Ubuntu kernel.==="
./debian/scripts/helpers/rebase

echo "===Done.==="

if [ $# -eq 1 ] && [ $1 = "auto-update" ]; then
    CRANKY_MAILENFORCE="*" ./debian/scripts/helpers/open

    cp -rf debian.master/config/ debian.tuxedo-${MAINLINE_KERNEL_VERSION}/
    sed -i "s/# ARCH: amd64 arm64 armhf ppc64el riscv64 s390x/# ARCH: amd64/" debian.tuxedo-${MAINLINE_KERNEL_VERSION}/config/annotations
    sed -i "s/# FLAVOUR: amd64-generic arm64-generic arm64-generic-64k armhf-generic ppc64el-generic riscv64-generic s390x-generic/# FLAVOUR: amd64-tuxedo/" debian.tuxedo-${MAINLINE_KERNEL_VERSION}/config/annotations

    cp -f debian.master/control.d/flavour-control.stub debian.tuxedo-${MAINLINE_KERNEL_VERSION}/control.d/flavour-control.stub
    cp -f debian.master/control.d/generic.inclusion-list debian.tuxedo-${MAINLINE_KERNEL_VERSION}/control.d/tuxedo.inclusion-list
    cp -f debian.master/control.d/linux-doc.stub debian.tuxedo-${MAINLINE_KERNEL_VERSION}/control.d/linux-doc.stub
    cp -f debian.master/control.d/linux-libc-dev.stub debian.tuxedo-${MAINLINE_KERNEL_VERSION}/control.d/linux-libc-dev.stub
    sed -i "s/Architecture: amd64 armhf arm64 i386 ppc64el riscv64 s390x/Architecture: amd64/" debian.tuxedo-${MAINLINE_KERNEL_VERSION}/control.d/linux-libc-dev.stub
    cp -f debian.master/control.d/vars.generic debian.tuxedo-${MAINLINE_KERNEL_VERSION}/control.d/vars.tuxedo
    sed -i 's/arch="amd64 armhf arm64 ppc64el s390x"/arch="amd64"/' debian.tuxedo-${MAINLINE_KERNEL_VERSION}/control.d/vars.tuxedo
    sed -i 's/supported="Generic"/supported="Tuxedo"/' debian.tuxedo-${MAINLINE_KERNEL_VERSION}/control.d/vars.tuxedo
    sed -i 's/bootloader="grub-pc \[amd64\] | grub-efi-amd64 \[amd64\] | grub-efi-ia32 \[amd64\] | grub \[amd64\] | lilo \[amd64\] | flash-kernel \[armhf arm64\] | grub-efi-arm64 \[arm64\] | grub-efi-arm \[armhf\] | grub-ieee1275 \[ppc64el\]"/bootloader="grub-pc \[amd64\] | grub-efi-amd64 \[amd64\] | grub-efi-ia32 \[amd64\] | grub \[amd64\] | lilo \[amd64\]"/' debian.tuxedo-${MAINLINE_KERNEL_VERSION}/control.d/vars.tuxedo

    cp -f debian.master/rules.d/amd64.mk debian.tuxedo-${MAINLINE_KERNEL_VERSION}/rules.d/amd64.mk
    sed -i "s/flavours	= generic/flavours	= tuxedo/" debian.tuxedo-${MAINLINE_KERNEL_VERSION}/rules.d/amd64.mk
    cp -f debian.master/rules.d/hooks.mk debian.tuxedo-${MAINLINE_KERNEL_VERSION}/rules.d/hooks.mk
    echo "gcc = gcc-11" >> debian.tuxedo-${MAINLINE_KERNEL_VERSION}/rules.d/hooks.mk

    cp -rf debian.master/modprobe.d/ debian.tuxedo-${MAINLINE_KERNEL_VERSION}/

    cp -f debian.master/control.stub.in debian.tuxedo-${MAINLINE_KERNEL_VERSION}/control.stub.in
    cp -f debian.master/reconstruct debian.tuxedo-${MAINLINE_KERNEL_VERSION}/reconstruct
    cp -f debian.master/tracking-bug debian.tuxedo-${MAINLINE_KERNEL_VERSION}/tracking-bug

    LANG=C fakeroot debian/rules updateconfigs || true
    LANG=C fakeroot debian/rules updateconfigs

    ./debian/scripts/helpers/close --include-config

    TUX_VERSION_PREFIX=Ubuntu-tuxedo-${MAINLINE_KERNEL_VERSION}-
    TUX_VERSION_NUMBER=$(grep -Pom1 "(?<=^linux-tuxedo-${MAINLINE_KERNEL_VERSION} \().*(?=\))" debian.tuxedo-${MAINLINE_KERNEL_VERSION}/changelog)
    git tag -s -m "${TUX_VERSION_PREFIX}${TUX_VERSION_NUMBER}" "${TUX_VERSION_PREFIX}${TUX_VERSION_NUMBER//\~/_}"
else
    echo "Run 'CRANKY_MAILENFORCE="*" ./debian/scripts/helpers/open' and './debian/scripts/helpers/close' next."
fi
